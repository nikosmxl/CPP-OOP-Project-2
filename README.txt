Compile with: g++ <program_name> OOP-Task2-nikosmxl.cpp bank.cpp bank.h
Execute with: ./<program_name> <arg1> <arg2> <arg3> <arg4>

Executed with arguments such as: 
    3 4 5 6
    10 10 10 10
    5 100 10 8
    1 2 3 4
    30 40 60 80
    7 7 7 7
    7 3 5 6

Κλασεις:

Στην κλαση "Cashier" εβαλα για public τις συναρτησεις που χρησιμοποιω κι εκτος της εμβελειας της κλασης (δηλαδη σε συναρτησεις της Bank κλασης).
Οι private συναρτησεις δεν χρησιμοποιουνται εκτος εμβελειας οποτε και ειναι private. Οι is_open() και is_free() ειναι const αφου ειναι mutators στην ουσια.
Επισης δεν χρειαζεται destructor αφου δεν δεσμευει μνημη στο heap.

Στην κλαση "Bank" αφησα μονο την enter() και την serve() στο public κομματι (εκτος των constructor/destructor) αφου μονο αυτες θελω να μπορει να χρησιμοποιησει ο χρηστης και αυτες
με την σειρα τους, τις υπολοιπες private συναρτησεις/μεταβλητες. Χρειαζεται destructor αφου δεσμευει χωρο στον heap. Οσες συναρτησεις λειτουργουν σαν mutators τις εχω ορισει με
const. Επισης για τα ταμεια χρησιμοιποιω εναν πινακα ο οποιος εχει δεικτες στα 5 ταμεια. Χρησιμοποιω μια extra μεταβλητη που δεν την προτεινει/αναφερει στην εκφωνηση, την 
next_to_open γιατι πιστευω κανει πιο απλη την κατανοηση του "ποιο ταμειο θα ειναι αυτο που θα ανοιξει στη συνεχεια" και για διευκολυνση δικη μου εννοειται.

Στον constructor περναω ορισματα το K και το L και τα κραταω στις κλασεις (Το K στην τραπεζα και το L στο καθε ταμειο).

Στις δοκιμες που εκανα δεν υπηρχαν leaks (χρησιμοποιωντας το valgrind).